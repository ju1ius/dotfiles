# shellcheck shell=bash

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return ;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# ----- PROMPT setup

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  # We have color support; assume it's compliant with Ecma-48 (ISO/IEC-6429).
  # (Lack of such support is extremely rare, and such a case would tend to support setf rather than setaf.)
  color_prompt=yes
else
  color_prompt=
fi

if [[ "$color_prompt" = yes ]] && command -v starship >/dev/null; then
  export STARSHIP_CONFIG=~/.dotfiles/starship/config.toml
  eval "$(starship init bash)"
elif [[ "$color_prompt" = yes && -f ~/.dotfiles/bash/prompt.sh ]]; then
  export PROMPT_USE_NERDFONT=1
  source ~/.dotfiles/bash/prompt.sh
else
  # Use default debian prompt

  # set variable identifying the chroot you work in (used in the prompt below)
  if [[ -z "${debian_chroot:-}" ]] && [[ -r /etc/debian_chroot ]]; then
    debian_chroot=$(cat /etc/debian_chroot)
  fi

  if [[ "$color_prompt" = yes ]]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
  else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
  fi
  # If this is an xterm set the title to user@host:dir
  case "$TERM" in
  xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
  *) ;;
  esac
fi

unset color_prompt

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  if test -r ~/.dircolors; then
    eval "$(dircolors -b ~/.dircolors)"
  else
    eval "$(dircolors -b)"
  fi
  alias ls='ls --color=auto'
  #alias dir='dir --color=auto'
  #alias vdir='vdir --color=auto'

  #alias grep='grep --color=auto'
  #alias fgrep='fgrep --color=auto'
  #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -lah'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# see /usr/share/doc/bash-doc/examples
if [ -f ~/.dotfiles/bash/aliases.sh ]; then
  . ~/.dotfiles/bash/aliases.sh
fi

# Environment variables
export COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1

if [ -x ~/bin/manpager.sh ]; then
  export MANROFFOPT='-c' MANPAGER=~/bin/manpager.sh
fi
if [ -x ~/bin/pager.sh ]; then
  export PAGER=~/bin/pager.sh
fi

# Enable programmable completion features.
# You don't need to enable this if it's already enabled
# in /etc/bash.bashrc and /etc/profile sources /etc/bash.bashrc
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if [[ -f ~/.clisnips.bash ]]; then
  # clisnips key bindings
  source ~/.clisnips.bash
fi
