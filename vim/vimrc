
source ~/.vim/config/plugins.vim

set hidden
set directory=~/.vim/swap//,.
set backupdir=~/.vim/backup//,.

let mapleader=";"
set guioptions=aegimrLt
set guifont=Fira\ Code\ 11
set mouse=a
if version >= 800
  set belloff=all
endif

" make search case-insensitive unless uppercase characters are entered
set smartcase

" Line numbering
set number relativenumber
augroup numberToggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Line wrapping
set nowrap
set breakindent
augroup ftWrap
  autocmd!
  autocmd FileType markdown,text setlocal wrap
  autocmd BufNewFile,BufRead * if empty(&filetype) | setlocal wrap | endif
augroup END

" Tabs & Whitespace
set expandtab
set shiftwidth=2 softtabstop=2
augroup ftTabSizes
  autocmd!
  autocmd FileType php,python setlocal shiftwidth=4 softtabstop=4
augroup END

noremap <leader>y "+y
noremap <leader>p "+p

" Help File speedups, <enter> to follow tag, backspace for back
augroup helpMappings
  autocmd!
  autocmd FileType help nnoremap <buffer><cr> <c-]>
  autocmd FileType help nnoremap <buffer><bs> <c-T>
  autocmd FileType help nnoremap <buffer>q :q<CR>
  autocmd FileType help setlocal nonumber
augroup END
" Split windows, ie Help, make more sense to me below
set splitbelow
" split to the right to avoid messing with NerdTree
set splitright

" termguicolors doesn't work inside tmux sessions...
if has("termguicolors") && empty($TMUX)
  set termguicolors
endif

let g:onedark_termcolors=16
colorscheme onedark

" Custom Commands

" Closes all buffers and reopen the current one
command! CloseBuffers :%bd | exe "normal! \<C-O>"


" Lightline
" No need to show current mode since we have lightline
set noshowmode

let g:lightline = {
\  'colorscheme': 'onedark',
\}
" maximbaz/lightline-ale
let g:lightline#ale#indicator_ok = '✔'
let g:lightline#ale#indicator_warning = '⚠'
let g:lightline#ale#indicator_error = '❌'
let g:lightline.component_expand = {
\  'linter_warnings': 'lightline#ale#warnings',
\  'linter_errors': 'lightline#ale#errors',
\  'linter_ok': 'lightline#ale#ok',
\  'git': 'fugitive#statusline',
\}
let g:lightline.component_type = {
\  'linter_warnings': 'warning',
\  'linter_errors': 'error',
\}
let g:lightline.active = {
\  'left': [
\    [ 'mode', 'paste' ],
\    [ 'git' ],
\    [ 'linter_errors', 'linter_warnings', 'linter_ok' ],
\  ],
\  'right': [
\    [ 'filename' ],
\    [ 'lineinfo' ],
\    [ 'modified', 'readonly', 'filetype' ],
\  ],
\}

" NERDTree
let NERDTreeMinimalUI = 1
nnoremap <leader>t :NERDTreeToggle<CR>
nnoremap <silent> <leader>T :NERDTreeFind<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger="<c-j>"
" Emmet
"let g:user_emmet_leader_key = "<c-l>"

" Use The Silver Searcher if available for ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" vim-jsx
" .jsx extension shan't be required
let g:jsx_ext_required = 0

" so Emmet.vim will work in JSX
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends': 'jsx',
\      'quote_char': '"',
\  },
\}

" vim-ale
"let g:airline#extensions#ale#enabled = 1
"let g:ale_lint_on_save = 1
"let g:ale_lint_on_text_changed = 0
"let g:ale_fix_on_save = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
let g:ale_linters = {
\   'javascript': ['eslint'],
\}
let g:ale_fixers = {
\   'javascript': ['prettier'],
\}
let g:ale_javascript_prettier_options = '--no-semi --single-quote --trailing-comma es5 --no-bracket-spacing'
let g:ale_javascript_prettier_use_local_config = 1

" php.vim

" fix for https://github.com/StanAngeloff/php.vim/issues/68
let php_html_load=0
let php_html_in_heredoc=0
let php_html_in_nowdoc=0

let php_sql_query=0
let php_sql_heredoc=0
let php_sql_nowdoc=0

" improves phpdoc highlighting
"function! PhpSyntaxOverride()
  "hi! def link phpDocTags  phpDefine
  "hi! def link phpDocParam phpType
"endfunction

"augroup phpSyntaxOverride
  "autocmd!
  "autocmd FileType php call PhpSyntaxOverride()
"augroup END

